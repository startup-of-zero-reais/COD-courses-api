// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/startup-of-zero-reais/COD-courses-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModuleRepository is an autogenerated mock type for the ModuleRepository type
type ModuleRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *ModuleRepository) Count() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Create provides a mock function with given fields: module
func (_m *ModuleRepository) Create(module domain.Module) (*domain.Module, error) {
	ret := _m.Called(module)

	var r0 *domain.Module
	if rf, ok := ret.Get(0).(func(domain.Module) *domain.Module); ok {
		r0 = rf(module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: moduleID
func (_m *ModuleRepository) Delete(moduleID string) error {
	ret := _m.Called(moduleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(moduleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: search, pagination
func (_m *ModuleRepository) Get(search map[string]string, pagination map[string]string) ([]domain.Module, error) {
	ret := _m.Called(search, pagination)

	var r0 []domain.Module
	if rf, ok := ret.Get(0).(func(map[string]string, map[string]string) []domain.Module); ok {
		r0 = rf(search, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string, map[string]string) error); ok {
		r1 = rf(search, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: module
func (_m *ModuleRepository) Save(module domain.Module) (*domain.Module, error) {
	ret := _m.Called(module)

	var r0 *domain.Module
	if rf, ok := ret.Get(0).(func(domain.Module) *domain.Module); ok {
		r0 = rf(module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
