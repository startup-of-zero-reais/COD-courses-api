// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/startup-of-zero-reais/COD-courses-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// SectionService is an autogenerated mock type for the SectionService type
type SectionService struct {
	mock.Mock
}

// Add provides a mock function with given fields: section
func (_m *SectionService) Add(section domain.Section) (*domain.Section, error) {
	ret := _m.Called(section)

	var r0 *domain.Section
	if rf, ok := ret.Get(0).(func(domain.Section) *domain.Section); ok {
		r0 = rf(section)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Section) error); ok {
		r1 = rf(section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: sectionID
func (_m *SectionService) Delete(sectionID string) error {
	ret := _m.Called(sectionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: sectionID
func (_m *SectionService) Get(sectionID string) (*domain.Section, error) {
	ret := _m.Called(sectionID)

	var r0 *domain.Section
	if rf, ok := ret.Get(0).(func(string) *domain.Section); ok {
		r0 = rf(sectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByModule provides a mock function with given fields: moduleID, pagination
func (_m *SectionService) ListByModule(moduleID string, pagination map[string]string) ([]domain.Section, error) {
	ret := _m.Called(moduleID, pagination)

	var r0 []domain.Section
	if rf, ok := ret.Get(0).(func(string, map[string]string) []domain.Section); ok {
		r0 = rf(moduleID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(moduleID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: section
func (_m *SectionService) Save(section domain.Section) (*domain.Section, error) {
	ret := _m.Called(section)

	var r0 *domain.Section
	if rf, ok := ret.Get(0).(func(domain.Section) *domain.Section); ok {
		r0 = rf(section)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Section) error); ok {
		r1 = rf(section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
