// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/startup-of-zero-reais/COD-courses-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// LessonService is an autogenerated mock type for the LessonService type
type LessonService struct {
	mock.Mock
}

// Add provides a mock function with given fields: lesson
func (_m *LessonService) Add(lesson domain.Lesson) (*domain.Lesson, error) {
	ret := _m.Called(lesson)

	var r0 *domain.Lesson
	if rf, ok := ret.Get(0).(func(domain.Lesson) *domain.Lesson); ok {
		r0 = rf(lesson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Lesson) error); ok {
		r1 = rf(lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: lessonID
func (_m *LessonService) Delete(lessonID string) error {
	ret := _m.Called(lessonID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: lessonID
func (_m *LessonService) Get(lessonID string) (*domain.Lesson, error) {
	ret := _m.Called(lessonID)

	var r0 *domain.Lesson
	if rf, ok := ret.Get(0).(func(string) *domain.Lesson); ok {
		r0 = rf(lessonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBySection provides a mock function with given fields: sectionID, query
func (_m *LessonService) ListBySection(sectionID string, query map[string]string) ([]domain.Lesson, error) {
	ret := _m.Called(sectionID, query)

	var r0 []domain.Lesson
	if rf, ok := ret.Get(0).(func(string, map[string]string) []domain.Lesson); ok {
		r0 = rf(sectionID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(sectionID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: lesson
func (_m *LessonService) Update(lesson domain.Lesson) (*domain.Lesson, error) {
	ret := _m.Called(lesson)

	var r0 *domain.Lesson
	if rf, ok := ret.Get(0).(func(domain.Lesson) *domain.Lesson); ok {
		r0 = rf(lesson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Lesson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Lesson) error); ok {
		r1 = rf(lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
